# -*- coding: utf-8 -*-
"""submission of state sum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbgLaPA8rZEANZ-v2zAqzdRraCD7j1Zg
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots
from sklearn.model_selection import train_test_split, KFold
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, confusion_matrix, classification_report, accuracy_score, f1_score,roc_auc_score,plot_confusion_matrix
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.model_selection import cross_validate
import csv
import math
from sklearn.model_selection import cross_val_score

df = pd.read_csv('/content/drive/MyDrive/data.csv')

df.head()
df.describe

df.describe()

df.columns

sns.relplot(x='state',y='sensor_01',data=df)

train = df.drop(['timestamp', 'sensor_00', 'sensor_02',
       'sensor_03', 'sensor_04', 'sensor_05', 'sensor_06', 'sensor_07',
       'sensor_08', 'sensor_09', 'sensor_10', 'sensor_11', 'sensor_12',
       'sensor_13', 'sensor_14', 'sensor_15', 'sensor_16', 'sensor_17',
       'sensor_18', 'sensor_19', 'sensor_20', 'sensor_21', 'sensor_22',
       'sensor_23', 'sensor_24', 'sensor_25', 'sensor_26', 'sensor_27',
       'sensor_28', 'sensor_29', 'sensor_30', 'sensor_31', 'sensor_32',
       'sensor_33', 'sensor_34', 'sensor_35', 'sensor_36', 'sensor_37',
       'sensor_38', 'sensor_39', 'sensor_40', 'sensor_41', 'sensor_42',
       'sensor_43', 'sensor_44', 'sensor_45', 'sensor_46', 'sensor_47',
       'sensor_48', 'sensor_49', 'sensor_50', 'sensor_51', 'machine_status'],axis = 1)

df.columns

df.shape

df.drop(['sensor_09', 'sensor_10', 'sensor_11', 'sensor_12',
       'sensor_13', 'sensor_14', 'sensor_15', 'sensor_16', 'sensor_17',
       'sensor_18', 'sensor_19', 'sensor_20', 'sensor_21', 'sensor_22',
       'sensor_23', 'sensor_24', 'sensor_25', 'sensor_26', 'sensor_27',
       'sensor_28', 'sensor_29', 'sensor_30', 'sensor_31', 'sensor_32',
       'sensor_33', 'sensor_34', 'sensor_35', 'sensor_36', 'sensor_37',
       'sensor_38', 'sensor_39', 'sensor_40', 'sensor_41', 'sensor_42',
       'sensor_43', 'sensor_44', 'sensor_45', 'sensor_46', 'sensor_47',
       'sensor_48', 'sensor_49', 'sensor_50', 'sensor_51', 'machine_status'], axis='columns', inplace=True)

df.shape

df.columns

import csv
ifile = open('/content/drive/MyDrive/data.csv')
reader = csv.reader(ifile)
x = []
y = []
m = []
FM=[]
for row in reader:
    x.append(str(row[0]))
    y.append(str(row[3]))
    m.append(str(row[54]))
    FM.append(str(row[57]))
    
    
ifile.close()

print(x[0]) 
print(y[0])
print(m[0])
print(FM[0])

def l(i):

    while i!=500:
    
      t=float(m[i]) #machine status
      z = float(x[i])  #state
      p = float(y[i]) #sensor values
      r=abs((z*(z-1))/2) #submission of state
      h = (r)*0.1592
      e= math.exp((-p/2)**2)
      g= h*e                   #g is equation 1
      a= g + 3.14              #took Ei= 3.14 for reference #ais Fault magnitude
      if a > 5.4488982849458294e+265:        #threshold  value is :5.4488982849458294e+265 as per dataset
                          
        print("Pump status=0","pump status by data=",t,)
        
      
      elif a<5.4488982849458294e+265:
     

        print("Pump status=1","Pump status by data=",t)
      else :
        print("error")  
      i=i+1
    #  print(z,p,h,g,a)
      
l(1)

